// This file is generated by Gradle task generateLoggerFunctions please do not edit it manually
package dev.schlaubi.stdx.logging

import kotlin.Throwable
import kotlin.Unit
import mu.KLogger
import mu.KotlinLoggingLevel
import mu.isLoggingEnabled

/**
 * Inline version of [KLogger.debug] so it can call suspend functions
 */
public actual inline fun KLogger.debugInlined(message: LazyLogMessage): Unit {
  if (KotlinLoggingLevel.DEBUG.isLoggingEnabled()) {
      val computedLogMessage = message()
      debug { computedLogMessage }
  }
}

/**
 * Inline version of [KLogger.debug] so it can call suspend functions
 */
public actual inline fun KLogger.debugInlined(throwable: Throwable, message: LazyLogMessage): Unit {
  if (KotlinLoggingLevel.DEBUG.isLoggingEnabled()) {
      val computedLogMessage = message()
      debug(throwable) { computedLogMessage }
  }
}

/**
 * Inline version of [KLogger.trace] so it can call suspend functions
 */
public actual inline fun KLogger.traceInlined(message: LazyLogMessage): Unit {
  if (KotlinLoggingLevel.TRACE.isLoggingEnabled()) {
      val computedLogMessage = message()
      trace { computedLogMessage }
  }
}

/**
 * Inline version of [KLogger.trace] so it can call suspend functions
 */
public actual inline fun KLogger.traceInlined(throwable: Throwable, message: LazyLogMessage): Unit {
  if (KotlinLoggingLevel.TRACE.isLoggingEnabled()) {
      val computedLogMessage = message()
      trace(throwable) { computedLogMessage }
  }
}

/**
 * Inline version of [KLogger.error] so it can call suspend functions
 */
public actual inline fun KLogger.errorInlined(message: LazyLogMessage): Unit {
  if (KotlinLoggingLevel.ERROR.isLoggingEnabled()) {
      val computedLogMessage = message()
      error { computedLogMessage }
  }
}

/**
 * Inline version of [KLogger.error] so it can call suspend functions
 */
public actual inline fun KLogger.errorInlined(throwable: Throwable, message: LazyLogMessage): Unit {
  if (KotlinLoggingLevel.ERROR.isLoggingEnabled()) {
      val computedLogMessage = message()
      error(throwable) { computedLogMessage }
  }
}

/**
 * Inline version of [KLogger.info] so it can call suspend functions
 */
public actual inline fun KLogger.infoInlined(message: LazyLogMessage): Unit {
  if (KotlinLoggingLevel.INFO.isLoggingEnabled()) {
      val computedLogMessage = message()
      info { computedLogMessage }
  }
}

/**
 * Inline version of [KLogger.info] so it can call suspend functions
 */
public actual inline fun KLogger.infoInlined(throwable: Throwable, message: LazyLogMessage): Unit {
  if (KotlinLoggingLevel.INFO.isLoggingEnabled()) {
      val computedLogMessage = message()
      info(throwable) { computedLogMessage }
  }
}

/**
 * Inline version of [KLogger.warn] so it can call suspend functions
 */
public actual inline fun KLogger.warnInlined(message: LazyLogMessage): Unit {
  if (KotlinLoggingLevel.WARN.isLoggingEnabled()) {
      val computedLogMessage = message()
      warn { computedLogMessage }
  }
}

/**
 * Inline version of [KLogger.warn] so it can call suspend functions
 */
public actual inline fun KLogger.warnInlined(throwable: Throwable, message: LazyLogMessage): Unit {
  if (KotlinLoggingLevel.WARN.isLoggingEnabled()) {
      val computedLogMessage = message()
      warn(throwable) { computedLogMessage }
  }
}

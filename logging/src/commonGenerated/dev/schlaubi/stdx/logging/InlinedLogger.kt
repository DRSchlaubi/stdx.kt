// This file is generated by Gradle task generateLoggerFunctions please do not edit it manually
package dev.schlaubi.stdx.logging

import io.github.oshai.kotlinlogging.KLogger

/**
 * Inline version of [KLogger.debug] so it can call suspend functions
 */
public inline fun KLogger.debugInlined(message: LazyLogMessage) {
  if (isDebugEnabled()) {
      val computedMessage = message()
      
      debug { computedMessage }
  }
}

/**
 * Inline version of [KLogger.debug] so it can call suspend functions
 */
public inline fun KLogger.debugInlined(throwable: Throwable, message: LazyLogMessage) {
  if (isDebugEnabled()) {
      val computedMessage = message()
      
      debug(throwable) { computedMessage }
  }
}

/**
 * Inline version of [KLogger.trace] so it can call suspend functions
 */
public inline fun KLogger.traceInlined(message: LazyLogMessage) {
  if (isTraceEnabled()) {
      val computedMessage = message()
      
      trace { computedMessage }
  }
}

/**
 * Inline version of [KLogger.trace] so it can call suspend functions
 */
public inline fun KLogger.traceInlined(throwable: Throwable, message: LazyLogMessage) {
  if (isTraceEnabled()) {
      val computedMessage = message()
      
      trace(throwable) { computedMessage }
  }
}

/**
 * Inline version of [KLogger.error] so it can call suspend functions
 */
public inline fun KLogger.errorInlined(message: LazyLogMessage) {
  if (isErrorEnabled()) {
      val computedMessage = message()
      
      error { computedMessage }
  }
}

/**
 * Inline version of [KLogger.error] so it can call suspend functions
 */
public inline fun KLogger.errorInlined(throwable: Throwable, message: LazyLogMessage) {
  if (isErrorEnabled()) {
      val computedMessage = message()
      
      error(throwable) { computedMessage }
  }
}

/**
 * Inline version of [KLogger.info] so it can call suspend functions
 */
public inline fun KLogger.infoInlined(message: LazyLogMessage) {
  if (isInfoEnabled()) {
      val computedMessage = message()
      
      info { computedMessage }
  }
}

/**
 * Inline version of [KLogger.info] so it can call suspend functions
 */
public inline fun KLogger.infoInlined(throwable: Throwable, message: LazyLogMessage) {
  if (isInfoEnabled()) {
      val computedMessage = message()
      
      info(throwable) { computedMessage }
  }
}

/**
 * Inline version of [KLogger.warn] so it can call suspend functions
 */
public inline fun KLogger.warnInlined(message: LazyLogMessage) {
  if (isWarnEnabled()) {
      val computedMessage = message()
      
      warn { computedMessage }
  }
}

/**
 * Inline version of [KLogger.warn] so it can call suspend functions
 */
public inline fun KLogger.warnInlined(throwable: Throwable, message: LazyLogMessage) {
  if (isWarnEnabled()) {
      val computedMessage = message()
      
      warn(throwable) { computedMessage }
  }
}

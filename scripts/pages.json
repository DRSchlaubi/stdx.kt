[{"name":"fun <T> Queue<T>.poll(amount: Int): List<T?>","description":"dev.schlaubi.stdx.core.poll","location":"stdx-core/dev.schlaubi.stdx.core/poll.html","searchKeys":["poll","fun <T> Queue<T>.poll(amount: Int): List<T?>","dev.schlaubi.stdx.core.poll"]},{"name":"fun List<String>.paginate(pageLength: Int, separator: String = \"\"): List<String>","description":"dev.schlaubi.stdx.core.paginate","location":"stdx-core/dev.schlaubi.stdx.core/paginate.html","searchKeys":["paginate","fun List<String>.paginate(pageLength: Int, separator: String = \"\"): List<String>","dev.schlaubi.stdx.core.paginate"]},{"name":"fun String.hash(algorithm: String): String","description":"dev.schlaubi.stdx.core.hash","location":"stdx-core/dev.schlaubi.stdx.core/hash.html","searchKeys":["hash","fun String.hash(algorithm: String): String","dev.schlaubi.stdx.core.hash"]},{"name":"fun String.isNumeric(): Boolean","description":"dev.schlaubi.stdx.core.isNumeric","location":"stdx-core/dev.schlaubi.stdx.core/is-numeric.html","searchKeys":["isNumeric","fun String.isNumeric(): Boolean","dev.schlaubi.stdx.core.isNumeric"]},{"name":"fun String.limit(maxLength: Int, truncate: String = \"...\"): String","description":"dev.schlaubi.stdx.core.limit","location":"stdx-core/dev.schlaubi.stdx.core/limit.html","searchKeys":["limit","fun String.limit(maxLength: Int, truncate: String = \"...\"): String","dev.schlaubi.stdx.core.limit"]},{"name":"fun String.nullIfBlank(): String?","description":"dev.schlaubi.stdx.core.nullIfBlank","location":"stdx-core/dev.schlaubi.stdx.core/null-if-blank.html","searchKeys":["nullIfBlank","fun String.nullIfBlank(): String?","dev.schlaubi.stdx.core.nullIfBlank"]},{"name":"fun String.sha256(): String","description":"dev.schlaubi.stdx.core.sha256","location":"stdx-core/dev.schlaubi.stdx.core/sha256.html","searchKeys":["sha256","fun String.sha256(): String","dev.schlaubi.stdx.core.sha256"]},{"name":"fun String.splitList(): List<String>","description":"dev.schlaubi.stdx.core.splitList","location":"stdx-core/dev.schlaubi.stdx.core/split-list.html","searchKeys":["splitList","fun String.splitList(): List<String>","dev.schlaubi.stdx.core.splitList"]},{"name":"fun String.splitListStrict(): List<String>","description":"dev.schlaubi.stdx.core.splitListStrict","location":"stdx-core/dev.schlaubi.stdx.core/split-list-strict.html","searchKeys":["splitListStrict","fun String.splitListStrict(): List<String>","dev.schlaubi.stdx.core.splitListStrict"]},{"name":"inline fun <K, E> MutableMap<K, E>.computeIfAbsent(key: K, initializer: () -> E): E","description":"dev.schlaubi.stdx.core.computeIfAbsent","location":"stdx-core/dev.schlaubi.stdx.core/compute-if-absent.html","searchKeys":["computeIfAbsent","inline fun <K, E> MutableMap<K, E>.computeIfAbsent(key: K, initializer: () -> E): E","dev.schlaubi.stdx.core.computeIfAbsent"]},{"name":"inline fun <T> Iterable<T>.onEach(action: T.() -> Unit)","description":"dev.schlaubi.stdx.core.onEach","location":"stdx-core/dev.schlaubi.stdx.core/on-each.html","searchKeys":["onEach","inline fun <T> Iterable<T>.onEach(action: T.() -> Unit)","dev.schlaubi.stdx.core.onEach"]},{"name":"inline fun String.isNotNumeric(): Boolean","description":"dev.schlaubi.stdx.core.isNotNumeric","location":"stdx-core/dev.schlaubi.stdx.core/is-not-numeric.html","searchKeys":["isNotNumeric","inline fun String.isNotNumeric(): Boolean","dev.schlaubi.stdx.core.isNotNumeric"]},{"name":"inline fun String?.isNotNullOrBlank(): Boolean","description":"dev.schlaubi.stdx.core.isNotNullOrBlank","location":"stdx-core/dev.schlaubi.stdx.core/is-not-null-or-blank.html","searchKeys":["isNotNullOrBlank","inline fun String?.isNotNullOrBlank(): Boolean","dev.schlaubi.stdx.core.isNotNullOrBlank"]},{"name":"inline fun String?.isNotNullOrEmpty(): Boolean","description":"dev.schlaubi.stdx.core.isNotNullOrEmpty","location":"stdx-core/dev.schlaubi.stdx.core/is-not-null-or-empty.html","searchKeys":["isNotNullOrEmpty","inline fun String?.isNotNullOrEmpty(): Boolean","dev.schlaubi.stdx.core.isNotNullOrEmpty"]},{"name":"fun <T> getEnv(prefix: String? = null, default: T? = null, transform: (String) -> T?): EnvironmentVariable<T>","description":"dev.schlaubi.envconf.getEnv","location":"stdx-envconf/dev.schlaubi.envconf/get-env.html","searchKeys":["getEnv","fun <T> getEnv(prefix: String? = null, default: T? = null, transform: (String) -> T?): EnvironmentVariable<T>","dev.schlaubi.envconf.getEnv"]},{"name":"fun Config(prefix: String = \"\")","description":"dev.schlaubi.envconf.Config.Config","location":"stdx-envconf/dev.schlaubi.envconf/-config/-config.html","searchKeys":["Config","fun Config(prefix: String = \"\")","dev.schlaubi.envconf.Config.Config"]},{"name":"fun getEnv(prefix: String? = null, default: String? = null): EnvironmentVariable<String>","description":"dev.schlaubi.envconf.getEnv","location":"stdx-envconf/dev.schlaubi.envconf/get-env.html","searchKeys":["getEnv","fun getEnv(prefix: String? = null, default: String? = null): EnvironmentVariable<String>","dev.schlaubi.envconf.getEnv"]},{"name":"object Companion","description":"dev.schlaubi.envconf.EnvironmentVariable.Companion","location":"stdx-envconf/dev.schlaubi.envconf/-environment-variable/-companion/index.html","searchKeys":["Companion","object Companion","dev.schlaubi.envconf.EnvironmentVariable.Companion"]},{"name":"open class Config(prefix: String)","description":"dev.schlaubi.envconf.Config","location":"stdx-envconf/dev.schlaubi.envconf/-config/index.html","searchKeys":["Config","open class Config(prefix: String)","dev.schlaubi.envconf.Config"]},{"name":"open fun optional(): EnvironmentVariable<T?>","description":"dev.schlaubi.envconf.EnvironmentVariable.optional","location":"stdx-envconf/dev.schlaubi.envconf/-environment-variable/optional.html","searchKeys":["optional","open fun optional(): EnvironmentVariable<T?>","dev.schlaubi.envconf.EnvironmentVariable.optional"]},{"name":"operator fun <T> invoke(prefix: String?, transform: (String) -> T?, default: T?): EnvironmentVariable<T>","description":"dev.schlaubi.envconf.EnvironmentVariable.Companion.invoke","location":"stdx-envconf/dev.schlaubi.envconf/-environment-variable/-companion/invoke.html","searchKeys":["invoke","operator fun <T> invoke(prefix: String?, transform: (String) -> T?, default: T?): EnvironmentVariable<T>","dev.schlaubi.envconf.EnvironmentVariable.Companion.invoke"]},{"name":"operator override fun getValue(thisRef: Any?, property: KProperty<*>): T","description":"dev.schlaubi.envconf.EnvironmentVariable.getValue","location":"stdx-envconf/dev.schlaubi.envconf/-environment-variable/get-value.html","searchKeys":["getValue","operator override fun getValue(thisRef: Any?, property: KProperty<*>): T","dev.schlaubi.envconf.EnvironmentVariable.getValue"]},{"name":"sealed class EnvironmentVariable<T> : ReadOnlyProperty<Any?, T> ","description":"dev.schlaubi.envconf.EnvironmentVariable","location":"stdx-envconf/dev.schlaubi.envconf/-environment-variable/index.html","searchKeys":["EnvironmentVariable","sealed class EnvironmentVariable<T> : ReadOnlyProperty<Any?, T> ","dev.schlaubi.envconf.EnvironmentVariable"]},{"name":"val environment: EnvironmentVariable<String>","description":"dev.schlaubi.envconf.environment","location":"stdx-envconf/dev.schlaubi.envconf/environment.html","searchKeys":["environment","val environment: EnvironmentVariable<String>","dev.schlaubi.envconf.environment"]},{"name":"abstract fun isInitialized(): Boolean","description":"dev.schlaubi.stdx.coroutines.SuspendLazy.isInitialized","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/-suspend-lazy/is-initialized.html","searchKeys":["isInitialized","abstract fun isInitialized(): Boolean","dev.schlaubi.stdx.coroutines.SuspendLazy.isInitialized"]},{"name":"abstract suspend fun get(): T","description":"dev.schlaubi.stdx.coroutines.SuspendLazy.get","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/-suspend-lazy/get.html","searchKeys":["get","abstract suspend fun get(): T","dev.schlaubi.stdx.coroutines.SuspendLazy.get"]},{"name":"expect fun <T> suspendLazy(initializer: SuspendingInitializer<T>): SuspendLazy<T>","description":"dev.schlaubi.stdx.coroutines.suspendLazy","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/suspend-lazy.html","searchKeys":["suspendLazy","expect fun <T> suspendLazy(initializer: SuspendingInitializer<T>): SuspendLazy<T>","dev.schlaubi.stdx.coroutines.suspendLazy"]},{"name":"expect fun <T> suspendLazy(mode: LazyThreadSafetyMode, initializer: SuspendingInitializer<T>): SuspendLazy<T>","description":"dev.schlaubi.stdx.coroutines.suspendLazy","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/suspend-lazy.html","searchKeys":["suspendLazy","expect fun <T> suspendLazy(mode: LazyThreadSafetyMode, initializer: SuspendingInitializer<T>): SuspendLazy<T>","dev.schlaubi.stdx.coroutines.suspendLazy"]},{"name":"fun <T> localSuspendLazy(initializer: SuspendingInitializer<T>): SuspendLazy<T>","description":"dev.schlaubi.stdx.coroutines.localSuspendLazy","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/local-suspend-lazy.html","searchKeys":["localSuspendLazy","fun <T> localSuspendLazy(initializer: SuspendingInitializer<T>): SuspendLazy<T>","dev.schlaubi.stdx.coroutines.localSuspendLazy"]},{"name":"interface SuspendLazy<out T>","description":"dev.schlaubi.stdx.coroutines.SuspendLazy","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/-suspend-lazy/index.html","searchKeys":["SuspendLazy","interface SuspendLazy<out T>","dev.schlaubi.stdx.coroutines.SuspendLazy"]},{"name":"open suspend operator fun invoke(): T","description":"dev.schlaubi.stdx.coroutines.SuspendLazy.invoke","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/-suspend-lazy/invoke.html","searchKeys":["invoke","open suspend operator fun invoke(): T","dev.schlaubi.stdx.coroutines.SuspendLazy.invoke"]},{"name":"suspend fun <T, S> Collection<T>.parallelMap(maxConcurrentRequests: Int? = null, mapper: suspend (T) -> S): List<S>","description":"dev.schlaubi.stdx.coroutines.parallelMap","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/parallel-map.html","searchKeys":["parallelMap","suspend fun <T, S> Collection<T>.parallelMap(maxConcurrentRequests: Int? = null, mapper: suspend (T) -> S): List<S>","dev.schlaubi.stdx.coroutines.parallelMap"]},{"name":"suspend fun <T, S> Collection<T>.parallelMapIndexed(maxConcurrentRequests: Int? = null, mapper: suspend (index: Int, T) -> S): List<S>","description":"dev.schlaubi.stdx.coroutines.parallelMapIndexed","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/parallel-map-indexed.html","searchKeys":["parallelMapIndexed","suspend fun <T, S> Collection<T>.parallelMapIndexed(maxConcurrentRequests: Int? = null, mapper: suspend (index: Int, T) -> S): List<S>","dev.schlaubi.stdx.coroutines.parallelMapIndexed"]},{"name":"suspend fun <T, S> Collection<T>.parallelMapNotNull(maxConcurrentRequests: Int? = null, mapper: suspend (T) -> S?): List<S>","description":"dev.schlaubi.stdx.coroutines.parallelMapNotNull","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/parallel-map-not-null.html","searchKeys":["parallelMapNotNull","suspend fun <T, S> Collection<T>.parallelMapNotNull(maxConcurrentRequests: Int? = null, mapper: suspend (T) -> S?): List<S>","dev.schlaubi.stdx.coroutines.parallelMapNotNull"]},{"name":"suspend fun <T, S> Collection<T>.parallelMapNotNullIndexed(maxConcurrentRequests: Int? = null, mapper: suspend (index: Int, T) -> S?): List<S>","description":"dev.schlaubi.stdx.coroutines.parallelMapNotNullIndexed","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/parallel-map-not-null-indexed.html","searchKeys":["parallelMapNotNullIndexed","suspend fun <T, S> Collection<T>.parallelMapNotNullIndexed(maxConcurrentRequests: Int? = null, mapper: suspend (index: Int, T) -> S?): List<S>","dev.schlaubi.stdx.coroutines.parallelMapNotNullIndexed"]},{"name":"suspend fun <T> Iterable<T>.forEachParallel(action: suspend (T) -> Unit)","description":"dev.schlaubi.stdx.coroutines.forEachParallel","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/for-each-parallel.html","searchKeys":["forEachParallel","suspend fun <T> Iterable<T>.forEachParallel(action: suspend (T) -> Unit)","dev.schlaubi.stdx.coroutines.forEachParallel"]},{"name":"suspend fun <T> Iterable<T>.onEachParallel(action: suspend T.() -> Unit)","description":"dev.schlaubi.stdx.coroutines.onEachParallel","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/on-each-parallel.html","searchKeys":["onEachParallel","suspend fun <T> Iterable<T>.onEachParallel(action: suspend T.() -> Unit)","dev.schlaubi.stdx.coroutines.onEachParallel"]},{"name":"suspend fun <T> blocking(block: suspend CoroutineScope.() -> T): T","description":"dev.schlaubi.stdx.coroutines.blocking","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/blocking.html","searchKeys":["blocking","suspend fun <T> blocking(block: suspend CoroutineScope.() -> T): T","dev.schlaubi.stdx.coroutines.blocking"]}]
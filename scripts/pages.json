[{"name":"expect object Platform","description":".Platform","location":"stdx-test-tools/[root]/-platform/index.html","searchKeys":["Platform","expect object Platform",".Platform"]},{"name":"expect val isBrowser: Boolean","description":".Platform.isBrowser","location":"stdx-test-tools/[root]/-platform/is-browser.html","searchKeys":["isBrowser","expect val isBrowser: Boolean",".Platform.isBrowser"]},{"name":"expect val isJs: Boolean = false","description":".Platform.isJs","location":"stdx-test-tools/[root]/-platform/is-js.html","searchKeys":["isJs","expect val isJs: Boolean = false",".Platform.isJs"]},{"name":"expect val isJvm: Boolean = false","description":".Platform.isJvm","location":"stdx-test-tools/[root]/-platform/is-jvm.html","searchKeys":["isJvm","expect val isJvm: Boolean = false",".Platform.isJvm"]},{"name":"expect val isNative: Boolean = true","description":".Platform.isNative","location":"stdx-test-tools/[root]/-platform/is-native.html","searchKeys":["isNative","expect val isNative: Boolean = true",".Platform.isNative"]},{"name":"expect val isNode: Boolean","description":".Platform.isNode","location":"stdx-test-tools/[root]/-platform/is-node.html","searchKeys":["isNode","expect val isNode: Boolean",".Platform.isNode"]},{"name":"fun <T> Queue<T>.poll(amount: Int): List<T?>","description":"dev.schlaubi.stdx.core.poll","location":"stdx-core/dev.schlaubi.stdx.core/poll.html","searchKeys":["poll","fun <T> Queue<T>.poll(amount: Int): List<T?>","dev.schlaubi.stdx.core.poll"]},{"name":"fun ByteArray.hash(algorithm: String): String","description":"dev.schlaubi.stdx.core.hash","location":"stdx-core/dev.schlaubi.stdx.core/hash.html","searchKeys":["hash","fun ByteArray.hash(algorithm: String): String","dev.schlaubi.stdx.core.hash"]},{"name":"fun ByteArray.sha256(): String","description":"dev.schlaubi.stdx.core.sha256","location":"stdx-core/dev.schlaubi.stdx.core/sha256.html","searchKeys":["sha256","fun ByteArray.sha256(): String","dev.schlaubi.stdx.core.sha256"]},{"name":"fun CharSequence.isNumeric(): Boolean","description":"dev.schlaubi.stdx.core.isNumeric","location":"stdx-core/dev.schlaubi.stdx.core/is-numeric.html","searchKeys":["isNumeric","fun CharSequence.isNumeric(): Boolean","dev.schlaubi.stdx.core.isNumeric"]},{"name":"fun CharSequence.removeLineBreaks(separator: String = \" \"): String","description":"dev.schlaubi.stdx.core.removeLineBreaks","location":"stdx-core/dev.schlaubi.stdx.core/remove-line-breaks.html","searchKeys":["removeLineBreaks","fun CharSequence.removeLineBreaks(separator: String = \" \"): String","dev.schlaubi.stdx.core.removeLineBreaks"]},{"name":"fun CharSequence.splitList(): List<String>","description":"dev.schlaubi.stdx.core.splitList","location":"stdx-core/dev.schlaubi.stdx.core/split-list.html","searchKeys":["splitList","fun CharSequence.splitList(): List<String>","dev.schlaubi.stdx.core.splitList"]},{"name":"fun CharSequence.splitListStrict(): List<String>","description":"dev.schlaubi.stdx.core.splitListStrict","location":"stdx-core/dev.schlaubi.stdx.core/split-list-strict.html","searchKeys":["splitListStrict","fun CharSequence.splitListStrict(): List<String>","dev.schlaubi.stdx.core.splitListStrict"]},{"name":"fun List<String>.paginate(pageLength: Int, separator: String = \"\"): List<String>","description":"dev.schlaubi.stdx.core.paginate","location":"stdx-core/dev.schlaubi.stdx.core/paginate.html","searchKeys":["paginate","fun List<String>.paginate(pageLength: Int, separator: String = \"\"): List<String>","dev.schlaubi.stdx.core.paginate"]},{"name":"fun Path.parent(n: Int): Path","description":"dev.schlaubi.stdx.core.parent","location":"stdx-core/dev.schlaubi.stdx.core/parent.html","searchKeys":["parent","fun Path.parent(n: Int): Path","dev.schlaubi.stdx.core.parent"]},{"name":"fun String.hash(algorithm: String): String","description":"dev.schlaubi.stdx.core.hash","location":"stdx-core/dev.schlaubi.stdx.core/hash.html","searchKeys":["hash","fun String.hash(algorithm: String): String","dev.schlaubi.stdx.core.hash"]},{"name":"fun String.limit(maxLength: Int, truncate: String = \"...\"): String","description":"dev.schlaubi.stdx.core.limit","location":"stdx-core/dev.schlaubi.stdx.core/limit.html","searchKeys":["limit","fun String.limit(maxLength: Int, truncate: String = \"...\"): String","dev.schlaubi.stdx.core.limit"]},{"name":"fun String.sha256(): String","description":"dev.schlaubi.stdx.core.sha256","location":"stdx-core/dev.schlaubi.stdx.core/sha256.html","searchKeys":["sha256","fun String.sha256(): String","dev.schlaubi.stdx.core.sha256"]},{"name":"inline fun <C : CharSequence> C.nullIfBlank(): C?","description":"dev.schlaubi.stdx.core.nullIfBlank","location":"stdx-core/dev.schlaubi.stdx.core/null-if-blank.html","searchKeys":["nullIfBlank","inline fun <C : CharSequence> C.nullIfBlank(): C?","dev.schlaubi.stdx.core.nullIfBlank"]},{"name":"inline fun <K, E> MutableMap<K, E>.computeIfAbsent(key: K, initializer: () -> E): E","description":"dev.schlaubi.stdx.core.computeIfAbsent","location":"stdx-core/dev.schlaubi.stdx.core/compute-if-absent.html","searchKeys":["computeIfAbsent","inline fun <K, E> MutableMap<K, E>.computeIfAbsent(key: K, initializer: () -> E): E","dev.schlaubi.stdx.core.computeIfAbsent"]},{"name":"inline fun <T> Iterable<T>.onEach(action: T.() -> Unit)","description":"dev.schlaubi.stdx.core.onEach","location":"stdx-core/dev.schlaubi.stdx.core/on-each.html","searchKeys":["onEach","inline fun <T> Iterable<T>.onEach(action: T.() -> Unit)","dev.schlaubi.stdx.core.onEach"]},{"name":"inline fun CharSequence.isNotNumeric(): Boolean","description":"dev.schlaubi.stdx.core.isNotNumeric","location":"stdx-core/dev.schlaubi.stdx.core/is-not-numeric.html","searchKeys":["isNotNumeric","inline fun CharSequence.isNotNumeric(): Boolean","dev.schlaubi.stdx.core.isNotNumeric"]},{"name":"inline fun CharSequence?.isNotNullOrBlank(): Boolean","description":"dev.schlaubi.stdx.core.isNotNullOrBlank","location":"stdx-core/dev.schlaubi.stdx.core/is-not-null-or-blank.html","searchKeys":["isNotNullOrBlank","inline fun CharSequence?.isNotNullOrBlank(): Boolean","dev.schlaubi.stdx.core.isNotNullOrBlank"]},{"name":"inline fun CharSequence?.isNotNullOrEmpty(): Boolean","description":"dev.schlaubi.stdx.core.isNotNullOrEmpty","location":"stdx-core/dev.schlaubi.stdx.core/is-not-null-or-empty.html","searchKeys":["isNotNullOrEmpty","inline fun CharSequence?.isNotNullOrEmpty(): Boolean","dev.schlaubi.stdx.core.isNotNullOrEmpty"]},{"name":"fun <T> getEnv(prefix: String? = null, default: T? = null, transform: (String) -> T?): EnvironmentVariable<T>","description":"dev.schlaubi.envconf.getEnv","location":"stdx-envconf/dev.schlaubi.envconf/get-env.html","searchKeys":["getEnv","fun <T> getEnv(prefix: String? = null, default: T? = null, transform: (String) -> T?): EnvironmentVariable<T>","dev.schlaubi.envconf.getEnv"]},{"name":"fun Config(prefix: String = \"\")","description":"dev.schlaubi.envconf.Config.Config","location":"stdx-envconf/dev.schlaubi.envconf/-config/-config.html","searchKeys":["Config","fun Config(prefix: String = \"\")","dev.schlaubi.envconf.Config.Config"]},{"name":"fun getEnv(prefix: String? = null, default: String? = null): EnvironmentVariable<String>","description":"dev.schlaubi.envconf.getEnv","location":"stdx-envconf/dev.schlaubi.envconf/get-env.html","searchKeys":["getEnv","fun getEnv(prefix: String? = null, default: String? = null): EnvironmentVariable<String>","dev.schlaubi.envconf.getEnv"]},{"name":"fun getValue(thisRef: Any?, property: KProperty<*>): T","description":"dev.schlaubi.envconf.EnvironmentVariable.getValue","location":"stdx-envconf/dev.schlaubi.envconf/-environment-variable/get-value.html","searchKeys":["getValue","fun getValue(thisRef: Any?, property: KProperty<*>): T","dev.schlaubi.envconf.EnvironmentVariable.getValue"]},{"name":"object Companion","description":"dev.schlaubi.envconf.EnvironmentVariable.Companion","location":"stdx-envconf/dev.schlaubi.envconf/-environment-variable/-companion/index.html","searchKeys":["Companion","object Companion","dev.schlaubi.envconf.EnvironmentVariable.Companion"]},{"name":"open class Config(prefix: String)","description":"dev.schlaubi.envconf.Config","location":"stdx-envconf/dev.schlaubi.envconf/-config/index.html","searchKeys":["Config","open class Config(prefix: String)","dev.schlaubi.envconf.Config"]},{"name":"open fun optional(): EnvironmentVariable<T?>","description":"dev.schlaubi.envconf.EnvironmentVariable.optional","location":"stdx-envconf/dev.schlaubi.envconf/-environment-variable/optional.html","searchKeys":["optional","open fun optional(): EnvironmentVariable<T?>","dev.schlaubi.envconf.EnvironmentVariable.optional"]},{"name":"operator fun <T> invoke(prefix: String?, transform: (String) -> T?, default: T?): EnvironmentVariable<T>","description":"dev.schlaubi.envconf.EnvironmentVariable.Companion.invoke","location":"stdx-envconf/dev.schlaubi.envconf/-environment-variable/-companion/invoke.html","searchKeys":["invoke","operator fun <T> invoke(prefix: String?, transform: (String) -> T?, default: T?): EnvironmentVariable<T>","dev.schlaubi.envconf.EnvironmentVariable.Companion.invoke"]},{"name":"sealed class EnvironmentVariable<T>","description":"dev.schlaubi.envconf.EnvironmentVariable","location":"stdx-envconf/dev.schlaubi.envconf/-environment-variable/index.html","searchKeys":["EnvironmentVariable","sealed class EnvironmentVariable<T>","dev.schlaubi.envconf.EnvironmentVariable"]},{"name":"val environment: EnvironmentVariable<String>","description":"dev.schlaubi.envconf.environment","location":"stdx-envconf/dev.schlaubi.envconf/environment.html","searchKeys":["environment","val environment: EnvironmentVariable<String>","dev.schlaubi.envconf.environment"]},{"name":"expect inline fun <ERROR CLASS>.debugInlined(message: LazyLogMessage)","description":"dev.schlaubi.stdx.logging.debugInlined","location":"stdx-logging/dev.schlaubi.stdx.logging/debug-inlined.html","searchKeys":["debugInlined","expect inline fun <ERROR CLASS>.debugInlined(message: LazyLogMessage)","dev.schlaubi.stdx.logging.debugInlined"]},{"name":"expect inline fun <ERROR CLASS>.debugInlined(throwable: Throwable, message: LazyLogMessage)","description":"dev.schlaubi.stdx.logging.debugInlined","location":"stdx-logging/dev.schlaubi.stdx.logging/debug-inlined.html","searchKeys":["debugInlined","expect inline fun <ERROR CLASS>.debugInlined(throwable: Throwable, message: LazyLogMessage)","dev.schlaubi.stdx.logging.debugInlined"]},{"name":"expect inline fun <ERROR CLASS>.errorInlined(message: LazyLogMessage)","description":"dev.schlaubi.stdx.logging.errorInlined","location":"stdx-logging/dev.schlaubi.stdx.logging/error-inlined.html","searchKeys":["errorInlined","expect inline fun <ERROR CLASS>.errorInlined(message: LazyLogMessage)","dev.schlaubi.stdx.logging.errorInlined"]},{"name":"expect inline fun <ERROR CLASS>.errorInlined(throwable: Throwable, message: LazyLogMessage)","description":"dev.schlaubi.stdx.logging.errorInlined","location":"stdx-logging/dev.schlaubi.stdx.logging/error-inlined.html","searchKeys":["errorInlined","expect inline fun <ERROR CLASS>.errorInlined(throwable: Throwable, message: LazyLogMessage)","dev.schlaubi.stdx.logging.errorInlined"]},{"name":"expect inline fun <ERROR CLASS>.infoInlined(message: LazyLogMessage)","description":"dev.schlaubi.stdx.logging.infoInlined","location":"stdx-logging/dev.schlaubi.stdx.logging/info-inlined.html","searchKeys":["infoInlined","expect inline fun <ERROR CLASS>.infoInlined(message: LazyLogMessage)","dev.schlaubi.stdx.logging.infoInlined"]},{"name":"expect inline fun <ERROR CLASS>.infoInlined(throwable: Throwable, message: LazyLogMessage)","description":"dev.schlaubi.stdx.logging.infoInlined","location":"stdx-logging/dev.schlaubi.stdx.logging/info-inlined.html","searchKeys":["infoInlined","expect inline fun <ERROR CLASS>.infoInlined(throwable: Throwable, message: LazyLogMessage)","dev.schlaubi.stdx.logging.infoInlined"]},{"name":"expect inline fun <ERROR CLASS>.traceInlined(message: LazyLogMessage)","description":"dev.schlaubi.stdx.logging.traceInlined","location":"stdx-logging/dev.schlaubi.stdx.logging/trace-inlined.html","searchKeys":["traceInlined","expect inline fun <ERROR CLASS>.traceInlined(message: LazyLogMessage)","dev.schlaubi.stdx.logging.traceInlined"]},{"name":"expect inline fun <ERROR CLASS>.traceInlined(throwable: Throwable, message: LazyLogMessage)","description":"dev.schlaubi.stdx.logging.traceInlined","location":"stdx-logging/dev.schlaubi.stdx.logging/trace-inlined.html","searchKeys":["traceInlined","expect inline fun <ERROR CLASS>.traceInlined(throwable: Throwable, message: LazyLogMessage)","dev.schlaubi.stdx.logging.traceInlined"]},{"name":"expect inline fun <ERROR CLASS>.warnInlined(message: LazyLogMessage)","description":"dev.schlaubi.stdx.logging.warnInlined","location":"stdx-logging/dev.schlaubi.stdx.logging/warn-inlined.html","searchKeys":["warnInlined","expect inline fun <ERROR CLASS>.warnInlined(message: LazyLogMessage)","dev.schlaubi.stdx.logging.warnInlined"]},{"name":"expect inline fun <ERROR CLASS>.warnInlined(throwable: Throwable, message: LazyLogMessage)","description":"dev.schlaubi.stdx.logging.warnInlined","location":"stdx-logging/dev.schlaubi.stdx.logging/warn-inlined.html","searchKeys":["warnInlined","expect inline fun <ERROR CLASS>.warnInlined(throwable: Throwable, message: LazyLogMessage)","dev.schlaubi.stdx.logging.warnInlined"]},{"name":"fun logger(): KLogger","description":"dev.schlaubi.stdx.logging.logger","location":"stdx-logging/dev.schlaubi.stdx.logging/logger.html","searchKeys":["logger","fun logger(): KLogger","dev.schlaubi.stdx.logging.logger"]},{"name":"fun emptyJsonObject(): <ERROR CLASS>","description":"dev.schlaubi.stdx.serialization.emptyJsonObject","location":"stdx-serialization/dev.schlaubi.stdx.serialization/empty-json-object.html","searchKeys":["emptyJsonObject","fun emptyJsonObject(): <ERROR CLASS>","dev.schlaubi.stdx.serialization.emptyJsonObject"]},{"name":"object InstantSerializer : KSerializer<Instant> ","description":"dev.schlaubi.stdx.serialization.InstantSerializer","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-instant-serializer/index.html","searchKeys":["InstantSerializer","object InstantSerializer : KSerializer<Instant> ","dev.schlaubi.stdx.serialization.InstantSerializer"]},{"name":"object LocalDateSerializer : KSerializer<LocalDate> ","description":"dev.schlaubi.stdx.serialization.LocalDateSerializer","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-local-date-serializer/index.html","searchKeys":["LocalDateSerializer","object LocalDateSerializer : KSerializer<LocalDate> ","dev.schlaubi.stdx.serialization.LocalDateSerializer"]},{"name":"object LocalDateTimeSerializer : KSerializer<LocalDateTime> ","description":"dev.schlaubi.stdx.serialization.LocalDateTimeSerializer","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-local-date-time-serializer/index.html","searchKeys":["LocalDateTimeSerializer","object LocalDateTimeSerializer : KSerializer<LocalDateTime> ","dev.schlaubi.stdx.serialization.LocalDateTimeSerializer"]},{"name":"object LocalTimeSerializer : KSerializer<LocalTime> ","description":"dev.schlaubi.stdx.serialization.LocalTimeSerializer","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-local-time-serializer/index.html","searchKeys":["LocalTimeSerializer","object LocalTimeSerializer : KSerializer<LocalTime> ","dev.schlaubi.stdx.serialization.LocalTimeSerializer"]},{"name":"object UUIDBinarySerializer : KSerializer<UUID> ","description":"dev.schlaubi.stdx.serialization.UUIDBinarySerializer","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-u-u-i-d-binary-serializer/index.html","searchKeys":["UUIDBinarySerializer","object UUIDBinarySerializer : KSerializer<UUID> ","dev.schlaubi.stdx.serialization.UUIDBinarySerializer"]},{"name":"object UUIDStringSerializer : KSerializer<UUID> ","description":"dev.schlaubi.stdx.serialization.UUIDStringSerializer","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-u-u-i-d-string-serializer/index.html","searchKeys":["UUIDStringSerializer","object UUIDStringSerializer : KSerializer<UUID> ","dev.schlaubi.stdx.serialization.UUIDStringSerializer"]},{"name":"open override fun deserialize(decoder: Decoder): Instant","description":"dev.schlaubi.stdx.serialization.InstantSerializer.deserialize","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-instant-serializer/deserialize.html","searchKeys":["deserialize","open override fun deserialize(decoder: Decoder): Instant","dev.schlaubi.stdx.serialization.InstantSerializer.deserialize"]},{"name":"open override fun deserialize(decoder: Decoder): LocalDate","description":"dev.schlaubi.stdx.serialization.LocalDateSerializer.deserialize","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-local-date-serializer/deserialize.html","searchKeys":["deserialize","open override fun deserialize(decoder: Decoder): LocalDate","dev.schlaubi.stdx.serialization.LocalDateSerializer.deserialize"]},{"name":"open override fun deserialize(decoder: Decoder): LocalDateTime","description":"dev.schlaubi.stdx.serialization.LocalDateTimeSerializer.deserialize","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-local-date-time-serializer/deserialize.html","searchKeys":["deserialize","open override fun deserialize(decoder: Decoder): LocalDateTime","dev.schlaubi.stdx.serialization.LocalDateTimeSerializer.deserialize"]},{"name":"open override fun deserialize(decoder: Decoder): LocalTime","description":"dev.schlaubi.stdx.serialization.LocalTimeSerializer.deserialize","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-local-time-serializer/deserialize.html","searchKeys":["deserialize","open override fun deserialize(decoder: Decoder): LocalTime","dev.schlaubi.stdx.serialization.LocalTimeSerializer.deserialize"]},{"name":"open override fun deserialize(decoder: Decoder): UUID","description":"dev.schlaubi.stdx.serialization.UUIDBinarySerializer.deserialize","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-u-u-i-d-binary-serializer/deserialize.html","searchKeys":["deserialize","open override fun deserialize(decoder: Decoder): UUID","dev.schlaubi.stdx.serialization.UUIDBinarySerializer.deserialize"]},{"name":"open override fun deserialize(decoder: Decoder): UUID","description":"dev.schlaubi.stdx.serialization.UUIDStringSerializer.deserialize","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-u-u-i-d-string-serializer/deserialize.html","searchKeys":["deserialize","open override fun deserialize(decoder: Decoder): UUID","dev.schlaubi.stdx.serialization.UUIDStringSerializer.deserialize"]},{"name":"open override fun serialize(encoder: Encoder, value: Instant)","description":"dev.schlaubi.stdx.serialization.InstantSerializer.serialize","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-instant-serializer/serialize.html","searchKeys":["serialize","open override fun serialize(encoder: Encoder, value: Instant)","dev.schlaubi.stdx.serialization.InstantSerializer.serialize"]},{"name":"open override fun serialize(encoder: Encoder, value: LocalDate)","description":"dev.schlaubi.stdx.serialization.LocalDateSerializer.serialize","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-local-date-serializer/serialize.html","searchKeys":["serialize","open override fun serialize(encoder: Encoder, value: LocalDate)","dev.schlaubi.stdx.serialization.LocalDateSerializer.serialize"]},{"name":"open override fun serialize(encoder: Encoder, value: LocalDateTime)","description":"dev.schlaubi.stdx.serialization.LocalDateTimeSerializer.serialize","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-local-date-time-serializer/serialize.html","searchKeys":["serialize","open override fun serialize(encoder: Encoder, value: LocalDateTime)","dev.schlaubi.stdx.serialization.LocalDateTimeSerializer.serialize"]},{"name":"open override fun serialize(encoder: Encoder, value: LocalTime)","description":"dev.schlaubi.stdx.serialization.LocalTimeSerializer.serialize","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-local-time-serializer/serialize.html","searchKeys":["serialize","open override fun serialize(encoder: Encoder, value: LocalTime)","dev.schlaubi.stdx.serialization.LocalTimeSerializer.serialize"]},{"name":"open override fun serialize(encoder: Encoder, value: UUID)","description":"dev.schlaubi.stdx.serialization.UUIDBinarySerializer.serialize","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-u-u-i-d-binary-serializer/serialize.html","searchKeys":["serialize","open override fun serialize(encoder: Encoder, value: UUID)","dev.schlaubi.stdx.serialization.UUIDBinarySerializer.serialize"]},{"name":"open override fun serialize(encoder: Encoder, value: UUID)","description":"dev.schlaubi.stdx.serialization.UUIDStringSerializer.serialize","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-u-u-i-d-string-serializer/serialize.html","searchKeys":["serialize","open override fun serialize(encoder: Encoder, value: UUID)","dev.schlaubi.stdx.serialization.UUIDStringSerializer.serialize"]},{"name":"open override val descriptor: SerialDescriptor","description":"dev.schlaubi.stdx.serialization.InstantSerializer.descriptor","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-instant-serializer/descriptor.html","searchKeys":["descriptor","open override val descriptor: SerialDescriptor","dev.schlaubi.stdx.serialization.InstantSerializer.descriptor"]},{"name":"open override val descriptor: SerialDescriptor","description":"dev.schlaubi.stdx.serialization.LocalDateSerializer.descriptor","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-local-date-serializer/descriptor.html","searchKeys":["descriptor","open override val descriptor: SerialDescriptor","dev.schlaubi.stdx.serialization.LocalDateSerializer.descriptor"]},{"name":"open override val descriptor: SerialDescriptor","description":"dev.schlaubi.stdx.serialization.LocalDateTimeSerializer.descriptor","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-local-date-time-serializer/descriptor.html","searchKeys":["descriptor","open override val descriptor: SerialDescriptor","dev.schlaubi.stdx.serialization.LocalDateTimeSerializer.descriptor"]},{"name":"open override val descriptor: SerialDescriptor","description":"dev.schlaubi.stdx.serialization.LocalTimeSerializer.descriptor","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-local-time-serializer/descriptor.html","searchKeys":["descriptor","open override val descriptor: SerialDescriptor","dev.schlaubi.stdx.serialization.LocalTimeSerializer.descriptor"]},{"name":"open override val descriptor: SerialDescriptor","description":"dev.schlaubi.stdx.serialization.UUIDBinarySerializer.descriptor","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-u-u-i-d-binary-serializer/descriptor.html","searchKeys":["descriptor","open override val descriptor: SerialDescriptor","dev.schlaubi.stdx.serialization.UUIDBinarySerializer.descriptor"]},{"name":"open override val descriptor: SerialDescriptor","description":"dev.schlaubi.stdx.serialization.UUIDStringSerializer.descriptor","location":"stdx-serialization/dev.schlaubi.stdx.serialization/-u-u-i-d-string-serializer/descriptor.html","searchKeys":["descriptor","open override val descriptor: SerialDescriptor","dev.schlaubi.stdx.serialization.UUIDStringSerializer.descriptor"]},{"name":"abstract fun isInitialized(): Boolean","description":"dev.schlaubi.stdx.coroutines.SuspendLazy.isInitialized","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/-suspend-lazy/is-initialized.html","searchKeys":["isInitialized","abstract fun isInitialized(): Boolean","dev.schlaubi.stdx.coroutines.SuspendLazy.isInitialized"]},{"name":"abstract suspend fun get(): T","description":"dev.schlaubi.stdx.coroutines.SuspendLazy.get","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/-suspend-lazy/get.html","searchKeys":["get","abstract suspend fun get(): T","dev.schlaubi.stdx.coroutines.SuspendLazy.get"]},{"name":"expect fun <T> suspendLazy(initializer: SuspendingInitializer<T>): SuspendLazy<T>","description":"dev.schlaubi.stdx.coroutines.suspendLazy","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/suspend-lazy.html","searchKeys":["suspendLazy","expect fun <T> suspendLazy(initializer: SuspendingInitializer<T>): SuspendLazy<T>","dev.schlaubi.stdx.coroutines.suspendLazy"]},{"name":"expect fun <T> suspendLazy(mode: <ERROR CLASS>, initializer: SuspendingInitializer<T>): SuspendLazy<T>","description":"dev.schlaubi.stdx.coroutines.suspendLazy","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/suspend-lazy.html","searchKeys":["suspendLazy","expect fun <T> suspendLazy(mode: <ERROR CLASS>, initializer: SuspendingInitializer<T>): SuspendLazy<T>","dev.schlaubi.stdx.coroutines.suspendLazy"]},{"name":"fun <T> localSuspendLazy(initializer: SuspendingInitializer<T>): SuspendLazy<T>","description":"dev.schlaubi.stdx.coroutines.localSuspendLazy","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/local-suspend-lazy.html","searchKeys":["localSuspendLazy","fun <T> localSuspendLazy(initializer: SuspendingInitializer<T>): SuspendLazy<T>","dev.schlaubi.stdx.coroutines.localSuspendLazy"]},{"name":"interface SuspendLazy<out T>","description":"dev.schlaubi.stdx.coroutines.SuspendLazy","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/-suspend-lazy/index.html","searchKeys":["SuspendLazy","interface SuspendLazy<out T>","dev.schlaubi.stdx.coroutines.SuspendLazy"]},{"name":"open suspend operator fun invoke(): T","description":"dev.schlaubi.stdx.coroutines.SuspendLazy.invoke","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/-suspend-lazy/invoke.html","searchKeys":["invoke","open suspend operator fun invoke(): T","dev.schlaubi.stdx.coroutines.SuspendLazy.invoke"]},{"name":"suspend fun <T, S> Collection<T>.parallelMap(maxConcurrentRequests: Int? = null, mapper: suspend (T) -> S): List<S>","description":"dev.schlaubi.stdx.coroutines.parallelMap","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/parallel-map.html","searchKeys":["parallelMap","suspend fun <T, S> Collection<T>.parallelMap(maxConcurrentRequests: Int? = null, mapper: suspend (T) -> S): List<S>","dev.schlaubi.stdx.coroutines.parallelMap"]},{"name":"suspend fun <T, S> Collection<T>.parallelMapIndexed(maxConcurrentRequests: Int? = null, mapper: suspend (index: Int, T) -> S): List<S>","description":"dev.schlaubi.stdx.coroutines.parallelMapIndexed","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/parallel-map-indexed.html","searchKeys":["parallelMapIndexed","suspend fun <T, S> Collection<T>.parallelMapIndexed(maxConcurrentRequests: Int? = null, mapper: suspend (index: Int, T) -> S): List<S>","dev.schlaubi.stdx.coroutines.parallelMapIndexed"]},{"name":"suspend fun <T, S> Collection<T>.parallelMapNotNull(maxConcurrentRequests: Int? = null, mapper: suspend (T) -> S?): List<S>","description":"dev.schlaubi.stdx.coroutines.parallelMapNotNull","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/parallel-map-not-null.html","searchKeys":["parallelMapNotNull","suspend fun <T, S> Collection<T>.parallelMapNotNull(maxConcurrentRequests: Int? = null, mapper: suspend (T) -> S?): List<S>","dev.schlaubi.stdx.coroutines.parallelMapNotNull"]},{"name":"suspend fun <T, S> Collection<T>.parallelMapNotNullIndexed(maxConcurrentRequests: Int? = null, mapper: suspend (index: Int, T) -> S?): List<S>","description":"dev.schlaubi.stdx.coroutines.parallelMapNotNullIndexed","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/parallel-map-not-null-indexed.html","searchKeys":["parallelMapNotNullIndexed","suspend fun <T, S> Collection<T>.parallelMapNotNullIndexed(maxConcurrentRequests: Int? = null, mapper: suspend (index: Int, T) -> S?): List<S>","dev.schlaubi.stdx.coroutines.parallelMapNotNullIndexed"]},{"name":"suspend fun <T> Iterable<T>.forEachParallel(action: suspend (T) -> Unit)","description":"dev.schlaubi.stdx.coroutines.forEachParallel","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/for-each-parallel.html","searchKeys":["forEachParallel","suspend fun <T> Iterable<T>.forEachParallel(action: suspend (T) -> Unit)","dev.schlaubi.stdx.coroutines.forEachParallel"]},{"name":"suspend fun <T> Iterable<T>.onEachParallel(action: suspend T.() -> Unit)","description":"dev.schlaubi.stdx.coroutines.onEachParallel","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/on-each-parallel.html","searchKeys":["onEachParallel","suspend fun <T> Iterable<T>.onEachParallel(action: suspend T.() -> Unit)","dev.schlaubi.stdx.coroutines.onEachParallel"]},{"name":"suspend fun <T> blocking(block: suspend CoroutineScope.() -> T): T","description":"dev.schlaubi.stdx.coroutines.blocking","location":"stdx-coroutines/dev.schlaubi.stdx.coroutines/blocking.html","searchKeys":["blocking","suspend fun <T> blocking(block: suspend CoroutineScope.() -> T): T","dev.schlaubi.stdx.coroutines.blocking"]}]